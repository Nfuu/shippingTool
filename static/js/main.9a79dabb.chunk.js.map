{"version":3,"sources":["components/Map.js","loaders/usePorts.js","loaders/useFlows.js","loaders/useCountries.js","loaders/useCountryFlows.js","components/ExportPortGraph.js","components/ImportPortGraph.js","components/PortInfo.js","components/PortLinkSidebar.js","components/YearSelector.js","components/CommoditySelector.js","components/MtDisplay.js","components/CO2Display.js","components/LevelSelector.js","components/PortDisplay.js","components/MineDisplay.js","loaders/useMines.js","components/PlantDisplay.js","loaders/useCoalPlants.js","components/MineInfo.js","components/MinePlantSidebar.js","App.js","reportWebVitals.js","index.js"],"names":["Map","props","useState","tooltipPosition","setTooltipPosition","loadPorts","data","setData","useEffect","csv","then","usePorts","loadFlows","useFlows","loadCountries","useCountries","loadCountryFlows","useCountryFlows","color","allPorts","allFlows","countryNodes","countryFlows","levelSelected","D3Layer","map","useMap","d3","getPanes","overlayPane","selectAll","remove","L","svg","clickable","addTo","flows","filter","Year","yearSelected","Commodity","commoditySelected","ports","port","setPortData","setFlowData","overlay","select","attr","linkLayer","append","portLayer","portTooltip","style","Dots","join","d","latLngToLayerPoint","lat","lon","x","y","radius","flow","Math","sqrt","on","event","this","flowNum","displayFlow","toFixed","importExport","html","Port","sourcePort","flowData","source","target","Links","enter","targetPort","sourceCoords","targetCoords","dx","dy","sx","sy","controls","pathDraw","width","exit","transition","duration","pointer","onSelectPort","MapContainer","id","height","center","zoom","scrollWheelZoom","TileLayer","attribution","url","ExportPortGraph","year","commodity","sort","a","b","parseFloat","forEach","num","decimals","formatFlowNumber","size","ResponsiveContainer","BarChart","slice","layout","margin","top","right","left","bottom","XAxis","type","hide","YAxis","Bar","dataKey","fill","LabelList","position","fontSize","Tooltip","COLORS","PortInfo","portData","selectedPort","obj","abs","error","console","log","justifyContent","alignItems","PieChart","Pie","cx","cy","innerRadius","outerRadius","nameKey","entry","index","Cell","length","Legend","verticalAlign","iconSize","PortLinkSidebar","clickedPort","portName","flowDirection","spacing","level","ImportPortGraph","YearSelector","setYear","fontWeight","aria-label","defaultValue","min","max","step","onChangeEnd","val","onSelectYear","handleYearChange","bg","boxSize","bgColor","CommoditySelector","setCommodity","onChange","onSelectCommodity","value","direction","MtDisplay","mtAmount","displayAmount","displayText","CO2Display","CO2Amount","LevelSelector","setLevel","onSelectLevel","PortDisplay","badgeColor","display","textAlign","borderRadius","px","deg2rad","deg","PI","MineDisplay","mines","useMines","mine","Distance","lat1","lon1","lat2","lon2","dLat","dLon","sin","cos","atan2","getDistance","Latitude","Longitude","Output","commodityMines","Thermal","Metallurgical","topMines","PlantDisplay","plants","useCoalPlants","plant","Capacity","topPlants","MineInfo","MinePlantSidebar","setMine","selectMine","object","App","setClickedPort","className","maxHeight","maxWidth","w","h","templateRows","templateColumns","gap","colStart","colEnd","rowStart","rowEnd","borderWidth","borderColor","shadow","padding","rowSpan","colSpan","overflow","orientation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a79dabb.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport * as d3 from \"d3\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport { usePorts } from \"../loaders/usePorts\";\nimport { useFlows } from \"../loaders/useFlows\";\nimport { useCountries } from \"../loaders/useCountries\";\nimport { useCountryFlows } from \"../loaders/useCountryFlows\";\nimport { pointer } from \"d3\";\nimport { Spinner } from \"@chakra-ui/react\";\n\nimport \"../styles/portTooltip.css\";\n\nconst Map = (props) => {\n  const [tooltipPosition, setTooltipPosition] = useState([0, 0]);\n\n  const loadPorts = usePorts();\n  const loadFlows = useFlows();\n  const loadCountries = useCountries();\n  const loadCountryFlows = useCountryFlows();\n\n  if (!loadPorts || !loadFlows || !loadCountries || !loadCountryFlows) {\n    return (\n      <pre>\n        <Spinner color=\"#38B2AC\" />\n      </pre>\n    );\n  }\n\n  var allPorts = loadPorts;\n  var allFlows = loadFlows;\n  var countryNodes = loadCountries;\n  var countryFlows = loadCountryFlows;\n\n  if (props.levelSelected !== \"Ports\") {\n    allPorts = countryNodes;\n    allFlows = countryFlows;\n  }\n\n  const D3Layer = () => {\n    const map = useMap();\n\n    d3.select(map.getPanes().overlayPane).selectAll(\"*\").remove();\n\n    L.svg({ clickable: true }).addTo(map);\n\n    useEffect(() => {\n      var flows = allFlows.filter(\n        (flows) =>\n          +flows.Year === props.yearSelected &&\n          flows.Commodity === props.commoditySelected\n      );\n\n      var ports = allPorts.filter(\n        (port) =>\n          +port.Year === props.yearSelected &&\n          port.Commodity === props.commoditySelected\n      );\n\n      props.setPortData(allPorts);\n      props.setFlowData(allFlows);\n\n      const overlay = d3.select(map.getPanes().overlayPane);\n\n      const svg = overlay.select(\"svg\").attr(\"pointer-events\", \"auto\");\n\n      const linkLayer = svg.append(\"g\");\n      const portLayer = svg.append(\"g\");\n\n      const portTooltip = overlay\n        .append(\"div\")\n        .attr(\"id\", \"portTooltip\")\n        .style(\"left\", tooltipPosition[0] + 30 + \"px\")\n        .style(\"top\", tooltipPosition[1] + 30 + \"px\");\n\n      function mouseover(event, d) {\n        d3.select(this).attr(\"fill-opacity\", 1).style(\"cursor\", \"pointer\");\n\n        var flowNum = +d.flow;\n        var displayFlow =\n          flowNum > 0 ? flowNum.toFixed(2) : -flowNum.toFixed(2);\n\n        var importExport = +d.flow > 0 ? \"Export\" : \"Import\";\n\n        portTooltip\n          .html(\n            `<p style=\"font-size: 1.5em\"><b>${d.Port}</b></p>\n            <p>${importExport}: ${displayFlow} megatonnes</p>\n            <p><b>Click</b> to see more details.</p>`\n          )\n          .style(\"opacity\", 1);\n\n        const sourcePort = d.Port;\n\n        if (d.flow > 0) {\n          var flowData = flows.filter((flow) => flow.source === sourcePort);\n        } else {\n          flowData = flows.filter((flow) => flow.target === sourcePort);\n        }\n\n        function pathDraw(sourceCoords, targetCoords) {\n          var source = map.latLngToLayerPoint(sourceCoords),\n            target = map.latLngToLayerPoint(targetCoords),\n            dx = source.x - target.x,\n            dy = source.y - target.y;\n\n          var sx = 0.4,\n            sy = 0.1;\n\n          if (dy < 0) {\n            var controls = [sx * dx, sy * dy, sx * dx, sy * dy];\n          } else {\n            controls = [sy * dx, sx * dy, sy * dx, sx * dy];\n          }\n\n          return (\n            \"M\" +\n            source.x +\n            \",\" +\n            source.y +\n            \"C\" +\n            (source.x - controls[0]) +\n            \",\" +\n            (source.y - controls[1]) +\n            \" \" +\n            (target.x + controls[2]) +\n            \",\" +\n            (target.y + controls[3]) +\n            \" \" +\n            target.x +\n            \",\" +\n            target.y\n          );\n        }\n\n        var Links = linkLayer.selectAll(\"path\").data(flowData);\n\n        Links.enter()\n          .append(\"path\")\n          .attr(\"class\", \"links\")\n          .attr(\"id\", (d) => {\n            return d.flow > 0 ? d.target : d.source;\n          })\n          .attr(\"d\", (d) => {\n            var sourcePort = allPorts.filter((port) => port.Port === d.source);\n            var targetPort = allPorts.filter((port) => port.Port === d.target);\n            var sourceCoords = [sourcePort[0].lat, sourcePort[0].lon];\n            var targetCoords = [targetPort[0].lat, targetPort[0].lon];\n\n            return pathDraw(sourceCoords, targetCoords);\n          })\n          .style(\"fill\", \"none\")\n          .style(\"stroke\", (d) => {\n            return importExport === \"Export\" ? \"tomato\" : \"#38B2AC\";\n          })\n          .style(\"stroke-width\", (d) => {\n            var width = +d.flow > 0 ? d.flow : -d.flow;\n            if (props.levelSelected === \"Ports\") {\n              return width + \"px\";\n            } else {\n              return width / 2 + \"px\";\n            }\n          })\n          .style(\"opacity\", 0.6);\n\n        Links.exit().remove();\n      }\n\n      function mouseleave(event, d) {\n        d3.select(this)\n          .transition()\n          .duration(\"150\")\n          .attr(\"fill-opacity\", 0.4)\n          .style(\"cursor\", \"default\");\n\n        portTooltip\n          .style(\"opacity\", 0)\n          .style(\"left\", 0 + \"px\")\n          .style(\"top\", 0 + \"px\");\n\n        linkLayer.selectAll(\"path\").remove();\n      }\n\n      function mousemove(event, d) {\n        portTooltip\n          .style(\"left\", pointer(event)[0] + 30 + \"px\")\n          .style(\"top\", pointer(event)[1] + 30 + \"px\");\n      }\n\n      function click(event, d) {\n        setTooltipPosition([pointer(event)[0], pointer(event)[1]]);\n\n        props.onSelectPort(d);\n      }\n\n      var Dots = portLayer\n        .selectAll(\"circle\")\n        .attr(\"class\", \"Dots\")\n        .data(ports)\n        .join(\"circle\")\n        .attr(\"id\", \"Ports\")\n        .attr(\"fill\", (d) => (+d[\"flow\"] < 0 ? \"#38B2AC\" : \"tomato\"))\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill-opacity\", 0.4)\n        .attr(\"cx\", (d) => {\n          return map.latLngToLayerPoint([d.lat, d.lon]).x;\n        })\n        .attr(\"cy\", (d) => map.latLngToLayerPoint([d.lat, d.lon]).y)\n        .attr(\"r\", (d) => {\n          var radius = +d.flow > 0 ? d.flow : -d.flow;\n\n          if (props.levelSelected === \"Ports\") {\n            return Math.sqrt(20 * +radius);\n          } else {\n            return Math.sqrt(10 * +radius);\n          }\n        })\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseleave\", mouseleave)\n        .on(\"click\", click)\n        .on(\"mousemove\", mousemove);\n\n      const update = () =>\n        Dots.attr(\"cx\", (d) => map.latLngToLayerPoint([d.lat, d.lon]).x).attr(\n          \"cy\",\n          (d) => map.latLngToLayerPoint([d.lat, d.lon]).y\n        );\n\n      map.on(\"zoomend\", update);\n    }, [map]);\n\n    return null;\n  };\n\n  return (\n    <>\n      <MapContainer\n        id=\"mainMap\"\n        style={{ height: \"100%\" }}\n        center={[5, 18]}\n        zoom={2}\n        scrollWheelZoom={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n          url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\"\n        />\n\n        <D3Layer />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default Map;\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/bd1bf080322618e46ad6a5552d646105/raw/ports.csv\";\n\nexport const usePorts = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/43b07a35f49cb3b74c1a93ed2c809961/raw/flows.csv\";\n\nexport const useFlows = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/56d12817f6462bf7cd782d423b86ac11/raw/country_nodes.csv\";\n\nexport const useCountries = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/4e4596e8863543d99182de35c7855660/raw/country_flows.csv\";\n\nexport const useCountryFlows = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  Tooltip,\n  LabelList,\n} from \"recharts\";\nimport { Box, Heading } from \"@chakra-ui/react\";\n\nconst formatFlowNumber = (num) => {\n  var number = parseFloat(num.flow);\n  var decimals = number.toFixed(2);\n\n  return parseFloat(decimals);\n};\n\nconst ExportPortGraph = (props) => {\n  const flowData = props.flowData;\n\n  const flows = flowData.filter(\n    (flow) =>\n      +flow.Year === props.year &&\n      flow.Commodity === props.commodity &&\n      flow.source === props.sourcePort\n  );\n\n  flows.sort((a, b) => parseFloat(b.flow) - parseFloat(a.flow));\n\n  flows.forEach((flow) => {\n    flow.flow = formatFlowNumber(flow);\n  });\n\n  return (\n    <>\n      <Box height=\"100%\" width=\"100%\">\n        <Heading size=\"sm\">Top 10 Destinations</Heading>\n        <ResponsiveContainer width=\"100%\" height=\"90%\">\n          <BarChart\n            data={flows.slice(0, 10)}\n            layout=\"vertical\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 5,\n            }}\n          >\n            <XAxis type=\"number\" hide />\n            <YAxis type=\"category\" hide />\n            <Bar dataKey=\"flow\" fill=\"tomato\">\n              <LabelList\n                dataKey=\"flow\"\n                position=\"right\"\n                style={{\n                  fontSize: \"0.8em\",\n                  fill: \"#000\",\n                }}\n              />\n            </Bar>\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default ExportPortGraph;\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  Tooltip,\n  LabelList,\n} from \"recharts\";\nimport { Box, Heading } from \"@chakra-ui/react\";\n\nconst formatFlowNumber = (num) => {\n  var number = parseFloat(num.flow);\n  var decimals = number.toFixed(2);\n\n  return parseFloat(decimals);\n};\n\nconst ExportPortGraph = (props) => {\n  const flowData = props.flowData;\n\n  if (!flowData) {\n    return null;\n  }\n\n  const flows = flowData.filter(\n    (flow) =>\n      +flow.Year === props.year &&\n      flow.Commodity === props.commodity &&\n      flow.target === props.targetPort\n  );\n\n  flows.sort((a, b) => parseFloat(b.flow) - parseFloat(a.flow));\n\n  flows.forEach((flow) => {\n    flow.flow = formatFlowNumber(flow);\n  });\n\n  return (\n    <>\n      <Box height=\"100%\" width=\"100%\">\n        <Heading size=\"sm\">Top 10 Origins</Heading>\n        <ResponsiveContainer width=\"100%\" height=\"90%\">\n          <BarChart\n            data={flows.slice(0, 10)}\n            layout=\"vertical\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 5,\n            }}\n          >\n            <XAxis type=\"number\" hide />\n            <YAxis type=\"category\" hide />\n            <Bar dataKey=\"flow\" fill=\"#38B2AC\">\n              <LabelList\n                dataKey=\"flow\"\n                position=\"right\"\n                style={{\n                  fontSize: \"0.8em\",\n                  fill: \"#000\",\n                }}\n              />\n            </Bar>\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default ExportPortGraph;\n","import { PieChart, Pie, Cell, Legend } from \"recharts\";\nimport { Heading, Box } from \"@chakra-ui/react\";\n\nconst COLORS = [\"gray\", \"brown\", \"black\"];\n\nconst PortInfo = (props) => {\n  const portData = props.portData;\n\n  if (!portData) {\n    return null;\n  }\n\n  const filterData = portData.filter(\n    (port) => +port.Year === props.year && port.Port === props.selectedPort\n  );\n\n  const data = filterData.map((obj) => ({ ...obj }));\n\n  data.forEach((port) => {\n    port.flow = Math.abs(+port.flow);\n    port.Commodity =\n      port.Commodity === \"Total\" ? \"Unspecified\" : port.Commodity;\n  });\n\n  try {\n    data[2].flow = data[2].flow - (data[0].flow + data[1].flow);\n  } catch (error) {}\n\n  console.log(data);\n\n  return (\n    <>\n      <Box\n        height=\"100%\"\n        width=\"100%\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Heading size=\"sm\"> Commodity breakdown</Heading>\n        <PieChart height={165} width={180}>\n          <Pie\n            cx={90}\n            cy={55}\n            data={data}\n            innerRadius={20}\n            outerRadius={50}\n            dataKey=\"flow\"\n            nameKey=\"Commodity\"\n          >\n            {data.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={COLORS[index % COLORS.length]}\n              />\n            ))}\n          </Pie>\n          <Legend\n            verticalAlign=\"bottom\"\n            margin={{ bottom: 20 }}\n            iconSize={14}\n          />\n        </PieChart>\n      </Box>\n    </>\n  );\n};\n\nexport default PortInfo;\n","import React from \"react\";\nimport { VStack, Box } from \"@chakra-ui/react\";\nimport ExportPortGraph from \"./ExportPortGraph.js\";\nimport ImportPortGraph from \"./ImportPortGraph.js\";\nimport PortInfo from \"./PortInfo.js\";\n\nconst PortLinkSidebar = (props) => {\n  const selectedPort = props.clickedPort;\n  const portName = selectedPort.Port;\n\n  if (+selectedPort.flow > 0) {\n    var flowDirection = \"Export\";\n  } else {\n    flowDirection = \"Import\";\n  }\n\n  if (flowDirection === \"Export\") {\n    return (\n      <>\n        <VStack height=\"100%\" width=\"100%\" spacing=\"20px\">\n          <Box height=\"calc(50% - 10px)\" width=\"100%\">\n            <ExportPortGraph\n              sourcePort={portName}\n              flowData={props.flowData}\n              portData={props.portData}\n              year={props.yearSelected}\n              level={props.levelSelected}\n              commodity={props.commoditySelected}\n            />\n          </Box>\n          <Box height=\"calc(50% - 10px)\" width=\"100%\">\n            <PortInfo\n              selectedPort={portName}\n              portData={props.portData}\n              year={props.yearSelected}\n            />\n          </Box>\n        </VStack>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <VStack height=\"100%\" width=\"100%\" spacing=\"20px\">\n          <Box height=\"calc(50% - 10px)\" width=\"100%\">\n            <ImportPortGraph\n              targetPort={portName}\n              flowData={props.flowData}\n              portData={props.portData}\n              year={props.yearSelected}\n              level={props.levelSelected}\n              commodity={props.commoditySelected}\n            />\n          </Box>\n          <Box height=\"calc(50% - 10px)\" width=\"100%\">\n            <PortInfo\n              selectedPort={portName}\n              portData={props.portData}\n              year={props.yearSelected}\n            />\n          </Box>\n        </VStack>\n      </>\n    );\n  }\n};\n\nexport default PortLinkSidebar;\n","import {\n  VStack,\n  Text,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst YearSelector = (props) => {\n  const [year, setYear] = useState(2020);\n\n  const handleYearChange = (val) => {\n    setYear(val);\n    props.onSelectYear(year);\n  };\n\n  return (\n    <>\n      <VStack width=\"100%\" spacing={2}>\n        <Text fontSize=\"2xl\" fontWeight=\"semibold\" color=\"#000\">\n          {year}\n        </Text>\n        <Slider\n          width=\"80%\"\n          aria-label=\"yearSlider\"\n          defaultValue={2020}\n          min={2017}\n          max={2020}\n          step={1}\n          onChangeEnd={(val) => handleYearChange(val)}\n        >\n          <SliderTrack bg=\"#1D77b7\">\n            <SliderFilledTrack bg=\"#212b57\" />\n          </SliderTrack>\n          <SliderThumb boxSize={4} bgColor=\"gray.200\" />\n        </Slider>\n      </VStack>\n    </>\n  );\n};\n\nexport default YearSelector;\n","import { Radio, RadioGroup, Stack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst CommoditySelector = (props) => {\n  const [commodity, setCommodity] = useState(\"Thermal\");\n\n  const handleSelection = (val) => {\n    setCommodity(val);\n\n    props.onSelectCommodity(val);\n  };\n\n  return (\n    <RadioGroup onChange={handleSelection} value={commodity}>\n      <Stack direction=\"row\" color=\"gray.600\">\n        <Radio value=\"Total\">Total</Radio>\n        <Radio value=\"Thermal\">Thermal</Radio>\n        <Radio value=\"Metallurgical\">Metallurgical</Radio>\n      </Stack>\n    </RadioGroup>\n  );\n};\n\nexport default CommoditySelector;\n","import { Center, Stat, StatLabel, StatNumber } from \"@chakra-ui/react\";\n\nconst MtDisplay = (props) => {\n  const mtAmount = +props.mtAmount;\n  const displayAmount = Math.abs(mtAmount.toFixed(2));\n\n  if (mtAmount > 0) {\n    var displayText = \"Exports in megatonnes:\";\n  } else {\n    displayText = \"Imports in megatonnes:\";\n  }\n\n  return (\n    <Center>\n      <Stat>\n        <StatLabel color=\"gray.600\">{displayText}</StatLabel>\n        <StatNumber>{`${displayAmount} Mt`}</StatNumber>\n      </Stat>\n    </Center>\n  );\n};\n\nexport default MtDisplay;\n","import { Center, Stat, StatLabel, StatNumber } from \"@chakra-ui/react\";\n\nconst CO2Display = (props) => {\n  const CO2Amount = Math.abs((+props.mtAmount * 2.86).toFixed(2));\n\n  return (\n    <Center>\n      <Stat>\n        <StatLabel color=\"gray.600\">CO2 emissions if coal burned:</StatLabel>\n        <StatNumber>{`${CO2Amount} Mt CO2e`}</StatNumber>\n      </Stat>\n    </Center>\n  );\n};\n\nexport default CO2Display;\n","import { Radio, RadioGroup, Stack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst LevelSelector = (props) => {\n  const [level, setLevel] = useState(\"Ports\");\n\n  const handleSelection = (val) => {\n    setLevel(val);\n\n    props.onSelectLevel(val);\n  };\n\n  return (\n    <RadioGroup onChange={handleSelection} value={level}>\n      <Stack direction=\"row\" color=\"gray.600\">\n        <Radio value=\"Countries\">Country</Radio>\n        <Radio value=\"Ports\">Ports</Radio>\n      </Stack>\n    </RadioGroup>\n  );\n};\n\nexport default LevelSelector;\n","import React from \"react\";\nimport { VStack, Badge, Flex, Text } from \"@chakra-ui/react\";\n\nconst PortDisplay = (props) => {\n  const selectedPort = props.clickedPort;\n  const portName = selectedPort.Port;\n\n  if (+selectedPort.flow > 0) {\n    var flowDirection = \"Export\";\n    var badgeColor = \"tomato\";\n  } else {\n    flowDirection = \"Import\";\n    badgeColor = \"#38B2AC\";\n  }\n\n  return (\n    <>\n      <Flex display=\"flex\" alignItems=\"center\">\n        <VStack>\n          <Text fontSize=\"2xl\" color=\"gray.600\" textAlign=\"center\">\n            {portName}\n          </Text>\n          <Badge borderRadius=\"full\" px=\"2\" bgColor={badgeColor} color=\"white\">\n            {flowDirection}\n          </Badge>\n        </VStack>\n      </Flex>\n    </>\n  );\n};\n\nexport default PortDisplay;\n","import React from \"react\";\nimport { useMines } from \"../loaders/useMines\";\nimport {\n  BarChart,\n  Bar,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  Tooltip,\n  LabelList,\n} from \"recharts\";\nimport { Heading, Box } from \"@chakra-ui/react\";\n\nimport \"../styles/legendItem.css\";\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2 - lat1); // deg2rad below\n  var dLon = deg2rad(lon2 - lon1);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) *\n      Math.cos(deg2rad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n  return d;\n};\n\nconst deg2rad = (deg) => {\n  return deg * (Math.PI / 180);\n};\n\nconst MineDisplay = (props) => {\n  const mines = useMines();\n\n  if (!mines) {\n    return <pre>Loading...</pre>;\n  }\n\n  const port = props.sourcePort;\n\n  mines.forEach((mine) => {\n    mine.Distance = getDistance(\n      port.lat,\n      port.lon,\n      mine.Latitude,\n      mine.Longitude\n    );\n\n    mine.Output = parseFloat(mine.Output);\n  });\n\n  mines.sort((a, b) => parseFloat(a.Distance) - parseFloat(b.Distance));\n\n  if (props.commodity === \"Thermal\") {\n    var commodityMines = mines.filter((mine) => mine.Thermal === \"TRUE\");\n  } else if (props.commodity === \"Metallurgical\") {\n    commodityMines = mines.filter((mine) => mine.Metallurgical === \"TRUE\");\n  } else {\n    commodityMines = mines;\n  }\n\n  const topMines = commodityMines.slice(0, 10);\n\n  return (\n    <>\n      <Box height=\"100%\" width=\"100%\">\n        <Heading size=\"sm\">Closest mines</Heading>\n        <ResponsiveContainer width=\"100%\" height=\"90%\">\n          <BarChart\n            data={topMines}\n            layout=\"vertical\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 5,\n            }}\n          >\n            <XAxis type=\"number\" hide />\n            <YAxis type=\"category\" hide />\n            <Bar dataKey=\"Output\" fill=\"tomato\">\n              <LabelList\n                dataKey=\"Output\"\n                position=\"right\"\n                style={{\n                  fontSize: \"0.8em\",\n                  fill: \"#000\",\n                }}\n              />\n            </Bar>\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default MineDisplay;\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/3d9519a9c80c0149c2accf244a88c4d8/raw/mines.csv\";\n\nexport const useMines = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import React from \"react\";\nimport { useCoalPlants } from \"../loaders/useCoalPlants\";\nimport {\n  BarChart,\n  Bar,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  Tooltip,\n  LabelList,\n} from \"recharts\";\nimport { Heading, Box, Spinner } from \"@chakra-ui/react\";\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2 - lat1); // deg2rad below\n  var dLon = deg2rad(lon2 - lon1);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) *\n      Math.cos(deg2rad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n  return d;\n};\n\nconst deg2rad = (deg) => {\n  return deg * (Math.PI / 180);\n};\n\nconst PlantDisplay = (props) => {\n  const plants = useCoalPlants();\n\n  if (!plants) {\n    return (\n      <pre>\n        <Spinner color=\"#38B2AC\" />\n      </pre>\n    );\n  }\n\n  const port = props.sourcePort;\n\n  if (port.Port === \"Select a port or country\") {\n    return null;\n  }\n\n  plants.forEach((plant) => {\n    plant.Distance = getDistance(\n      port.lat,\n      port.lon,\n      plant.Latitude,\n      plant.Longitude\n    );\n\n    plant.Capacity = parseFloat(plant.Capacity);\n  });\n\n  plants.sort((a, b) => parseFloat(a.Distance) - parseFloat(b.Distance));\n\n  const topPlants = plants.slice(0, 10);\n\n  return (\n    <>\n      <Box height=\"100%\" width=\"100%\">\n        <Heading size=\"sm\">Closest coal plants</Heading>\n        <ResponsiveContainer width=\"100%\" height=\"90%\">\n          <BarChart\n            data={topPlants}\n            layout=\"vertical\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 5,\n            }}\n          >\n            <XAxis type=\"number\" hide />\n            <YAxis type=\"category\" hide />\n            <Bar dataKey=\"Capacity\" fill=\"#38B2AC\">\n              <LabelList\n                dataKey=\"Capacity\"\n                position=\"right\"\n                style={{\n                  fontSize: \"0.8em\",\n                  fill: \"#000\",\n                }}\n              />\n            </Bar>\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default PlantDisplay;\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/e3d8ba2ec55191b1049d457711a3162f/raw/coalPlants.csv\";\n\nexport const useCoalPlants = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","const MineInfo = (props) => {\n  return <div>MineInfo</div>;\n};\n\nexport default MineInfo;\n","import React, { useState } from \"react\";\nimport { Box, VStack } from \"@chakra-ui/react\";\nimport ExportPortGraph from \"./ExportPortGraph.js\";\nimport ImportPortGraph from \"./ImportPortGraph.js\";\nimport MineDisplay from \"./MineDisplay.js\";\nimport PlantDisplay from \"./PlantDisplay.js\";\nimport MineInfo from \"./MineInfo.js\";\n\nconst MinePlantSidebar = (props) => {\n  const [mine, setMine] = useState(null);\n\n  const selectedPort = props.clickedPort;\n  const portName = selectedPort.Port;\n\n  if (+selectedPort.flow > 0) {\n    var flowDirection = \"Export\";\n  } else {\n    flowDirection = \"Import\";\n  }\n\n  if (flowDirection === \"Export\") {\n    return (\n      <>\n        <VStack height=\"100%\" width=\"100%\" spacing=\"20px\">\n          <Box height=\"calc(50% - 10px)\" width=\"100%\">\n            <MineDisplay\n              sourcePort={props.clickedPort}\n              commodity={props.commoditySelected}\n              selectMine={(object) => setMine(object)}\n            />\n            <MineInfo />\n          </Box>\n        </VStack>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <VStack height=\"100%\" width=\"100%\" spacing=\"20px\">\n          <Box height=\"calc(50% - 10px)\" width=\"100%\">\n            <PlantDisplay sourcePort={props.clickedPort} />\n          </Box>\n        </VStack>\n      </>\n    );\n  }\n};\n\nexport default MinePlantSidebar;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Map from \"./components/Map\";\nimport \"./styles/custom.css\";\nimport \"./styles/outerContainer.css\";\nimport { Grid, GridItem, Box, Center, Divider, VStack } from \"@chakra-ui/react\";\nimport PortLinkSidebar from \"./components/PortLinkSidebar\";\nimport YearSelector from \"./components/YearSelector\";\nimport CommoditySelector from \"./components/CommoditySelector\";\nimport MtDisplay from \"./components/MtDisplay\";\nimport CO2Display from \"./components/CO2Display\";\nimport LevelSelector from \"./components/LevelSelector\";\nimport PortDisplay from \"./components/PortDisplay\";\nimport MinePlantSidebar from \"./components/MinePlantSidebar\";\n\nfunction App() {\n  const [clickedPort, setClickedPort] = useState({\n    Port: \"Select a port or country\",\n    flow: 0,\n  });\n  const [yearSelected, setYear] = useState(2020);\n  const [commoditySelected, setCommodity] = useState(\"Thermal\");\n  const [levelSelected, setLevel] = useState(\"Ports\");\n  const [portData, setPortData] = useState(null);\n  const [flowData, setFlowData] = useState(null);\n\n  return (\n    <>\n      <div className=\"outerContainer\">\n        <Grid\n          maxHeight=\"900px\"\n          maxWidth=\"1600px\"\n          w=\"100vw\"\n          h=\"100vh\"\n          templateRows=\"repeat(20, 1fr)\"\n          templateColumns=\"repeat(5, 1fr)\"\n          gap=\"4\"\n        >\n          <GridItem colStart={1} colEnd={1} rowStart={1} rowEnd={4}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              borderWidth=\"5pt\"\n              borderColor={clickedPort.flow > 0 ? \"tomato\" : \"#38B2AC\"}\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              display=\"flex\"\n            >\n              <PortDisplay clickedPort={clickedPort} />\n            </Box>\n          </GridItem>\n          <GridItem colStart={1} colEnd={1} rowStart={4} rowEnd={21}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              padding=\"5\"\n              display=\"flex\"\n            >\n              <PortLinkSidebar\n                clickedPort={clickedPort}\n                portData={portData}\n                flowData={flowData}\n                yearSelected={yearSelected}\n                commoditySelected={commoditySelected}\n                levelSelected={levelSelected}\n              />\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={3} colSpan={1}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              display=\"flex\"\n            >\n              <MtDisplay mtAmount={clickedPort.flow} />\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={3} colSpan={1}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              display=\"flex\"\n            >\n              <CO2Display mtAmount={clickedPort.flow} />\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={3} colSpan={2}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              overflow=\"hidden\"\n              display=\"flex\"\n            >\n              <Box\n                width=\"40%\"\n                height=\"100%\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                display=\"flex\"\n              >\n                <YearSelector onSelectYear={(value) => setYear(value)} />\n              </Box>\n              <Center height=\"50px\">\n                <Divider orientation=\"vertical\" />\n              </Center>\n              <Box\n                width=\"60%\"\n                height=\"100%\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                display=\"flex\"\n              >\n                <VStack spacing={2}>\n                  <CommoditySelector\n                    onSelectCommodity={(value) => setCommodity(value)}\n                  />\n                  <Divider orientation=\"horizontal\" />\n                  <LevelSelector onSelectLevel={(value) => setLevel(value)} />\n                </VStack>\n              </Box>\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={17} colSpan={3}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"2xl\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              overflow=\"hidden\"\n            >\n              <Map\n                onSelectPort={(object) => setClickedPort(object)}\n                yearSelected={yearSelected}\n                commoditySelected={commoditySelected}\n                levelSelected={levelSelected}\n                setPortData={(object) => setPortData(object)}\n                setFlowData={(object) => setFlowData(object)}\n              />\n            </Box>\n          </GridItem>\n          <GridItem colStart={5} colEnd={5} rowStart={4} rowEnd={21}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              padding=\"5\"\n              display=\"flex\"\n            >\n              <MinePlantSidebar\n                clickedPort={clickedPort}\n                portData={portData}\n                flowData={flowData}\n                yearSelected={yearSelected}\n                commoditySelected={commoditySelected}\n                levelSelected={levelSelected}\n              />\n            </Box>\n          </GridItem>\n        </Grid>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}