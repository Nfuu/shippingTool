{"version":3,"sources":["components/Map.js","loaders/usePorts.js","loaders/useFlows.js","loaders/useCountries.js","loaders/useCountryFlows.js","components/ExportPortGraph.js","components/ImportPortGraph.js","components/MineDisplay.js","loaders/useMines.js","components/PlantDisplay.js","components/PortLinkSidebar.js","components/YearSelector.js","components/CommoditySelector.js","components/MtDisplay.js","components/CO2Display.js","components/LevelSelector.js","components/PortDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["Map","props","useState","tooltipPosition","setTooltipPosition","loadPorts","data","setData","useEffect","csv","then","usePorts","loadFlows","useFlows","loadCountries","useCountries","loadCountryFlows","useCountryFlows","allPorts","allFlows","countryNodes","countryFlows","levelSelected","D3Layer","map","useMap","d3","getPanes","overlayPane","selectAll","remove","L","svg","clickable","addTo","flows","filter","Year","yearSelected","Commodity","commoditySelected","ports","port","setPortData","setFlowData","overlay","select","attr","linkLayer","append","portLayer","portTooltip","style","Dots","join","d","latLngToLayerPoint","lat","lon","x","y","radius","flow","on","event","this","flowNum","displayFlow","toFixed","importExport","html","Port","sourcePort","flowData","source","target","Links","enter","targetPort","sourceCoords","targetCoords","dx","dy","sx","sy","controls","pathDraw","width","exit","transition","duration","pointer","onSelectPort","MapContainer","id","height","center","zoom","scrollWheelZoom","TileLayer","attribution","url","ExportPortGraph","year","commodity","sort","a","b","parseFloat","console","log","slice","fontSize","color","textAlign","ResponsiveContainer","BarChart","layout","XAxis","type","YAxis","hide","Bar","dataKey","fill","LabelList","position","Tooltip","deg2rad","deg","Math","PI","MineDisplay","mines","useMines","forEach","mine","Distance","lat1","lon1","lat2","lon2","dLat","dLon","sin","cos","atan2","sqrt","getDistance","Latitude","Longitude","commodityMines","Thermal","Metallurgical","topMines","PlantDisplay","PortLinkSidebar","selectedPort","clickedPort","portName","flowDirection","portData","level","ImportPortGraph","YearSelector","setYear","spacing","aria-label","defaultValue","min","max","step","onChangeEnd","val","onSelectYear","handleYearChange","bg","boxSize","bgColor","CommoditySelector","setCommodity","onChange","onSelectCommodity","value","direction","MtDisplay","mtAmount","displayAmount","abs","CO2Display","CO2Amount","LevelSelector","setLevel","onSelectLevel","PortDisplay","badgeColor","display","alignItems","borderRadius","px","App","setClickedPort","className","maxHeight","maxWidth","w","h","templateRows","templateColumns","gap","colStart","colEnd","rowStart","rowEnd","borderWidth","borderColor","shadow","justifyContent","padding","rowSpan","colSpan","overflow","orientation","object","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dbe4dd4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport * as d3 from \"d3\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport { usePorts } from \"../loaders/usePorts\";\nimport { useFlows } from \"../loaders/useFlows\";\nimport { useCountries } from \"../loaders/useCountries\";\nimport { useCountryFlows } from \"../loaders/useCountryFlows\";\nimport { pointer } from \"d3\";\n\nimport \"../styles/portTooltip.css\";\n\nconst Map = (props) => {\n  const [tooltipPosition, setTooltipPosition] = useState([0, 0]);\n\n  const loadPorts = usePorts();\n  const loadFlows = useFlows();\n  const loadCountries = useCountries();\n  const loadCountryFlows = useCountryFlows();\n\n  if (!loadPorts || !loadFlows || !loadCountries || !loadCountryFlows) {\n    return <pre>Loading...</pre>;\n  }\n\n  var allPorts = loadPorts;\n  var allFlows = loadFlows;\n  var countryNodes = loadCountries;\n  var countryFlows = loadCountryFlows;\n\n  if (props.levelSelected !== \"Ports\") {\n    allPorts = countryNodes;\n    allFlows = countryFlows;\n  }\n\n  const D3Layer = () => {\n    const map = useMap();\n\n    d3.select(map.getPanes().overlayPane).selectAll(\"*\").remove();\n\n    L.svg({ clickable: true }).addTo(map);\n\n    useEffect(() => {\n      var flows = allFlows.filter(\n        (flows) =>\n          +flows.Year === props.yearSelected &&\n          flows.Commodity === props.commoditySelected\n      );\n\n      var ports = allPorts.filter(\n        (port) =>\n          +port.Year === props.yearSelected &&\n          port.Commodity === props.commoditySelected\n      );\n\n      props.setPortData(allPorts);\n      props.setFlowData(allFlows);\n\n      const overlay = d3.select(map.getPanes().overlayPane);\n\n      const svg = overlay.select(\"svg\").attr(\"pointer-events\", \"auto\");\n\n      const linkLayer = svg.append(\"g\");\n      const portLayer = svg.append(\"g\");\n\n      const portTooltip = overlay\n        .append(\"div\")\n        .attr(\"id\", \"portTooltip\")\n        .style(\"left\", tooltipPosition[0] + 30 + \"px\")\n        .style(\"top\", tooltipPosition[1] + 30 + \"px\");\n\n      function mouseover(event, d) {\n        d3.select(this).attr(\"fill-opacity\", 1).style(\"cursor\", \"pointer\");\n\n        var flowNum = +d.flow;\n        var displayFlow =\n          flowNum > 0 ? flowNum.toFixed(2) : -flowNum.toFixed(2);\n\n        var importExport = +d.flow > 0 ? \"Export\" : \"Import\";\n\n        portTooltip\n          .html(\n            `<p style=\"font-size: 1.5em\"><b>${d.Port}</b></p>\n            <p>${importExport}: ${displayFlow} megatonnes</p>\n            <p><b>Click</b> to see more details.</p>`\n          )\n          .style(\"opacity\", 1);\n\n        const sourcePort = d.Port;\n\n        if (d.flow > 0) {\n          var flowData = flows.filter((flow) => flow.source === sourcePort);\n        } else {\n          flowData = flows.filter((flow) => flow.target === sourcePort);\n        }\n\n        function pathDraw(sourceCoords, targetCoords) {\n          var source = map.latLngToLayerPoint(sourceCoords),\n            target = map.latLngToLayerPoint(targetCoords),\n            dx = source.x - target.x,\n            dy = source.y - target.y;\n\n          var sx = 0.4,\n            sy = 0.1;\n\n          if (dy < 0) {\n            var controls = [sx * dx, sy * dy, sx * dx, sy * dy];\n          } else {\n            controls = [sy * dx, sx * dy, sy * dx, sx * dy];\n          }\n\n          return (\n            \"M\" +\n            source.x +\n            \",\" +\n            source.y +\n            \"C\" +\n            (source.x - controls[0]) +\n            \",\" +\n            (source.y - controls[1]) +\n            \" \" +\n            (target.x + controls[2]) +\n            \",\" +\n            (target.y + controls[3]) +\n            \" \" +\n            target.x +\n            \",\" +\n            target.y\n          );\n        }\n\n        var Links = linkLayer.selectAll(\"path\").data(flowData);\n\n        Links.enter()\n          .append(\"path\")\n          .attr(\"class\", \"links\")\n          .attr(\"id\", (d) => {\n            return d.flow > 0 ? d.target : d.source;\n          })\n          .attr(\"d\", (d) => {\n            var sourcePort = allPorts.filter((port) => port.Port === d.source);\n            var targetPort = allPorts.filter((port) => port.Port === d.target);\n            var sourceCoords = [sourcePort[0].lat, sourcePort[0].lon];\n            var targetCoords = [targetPort[0].lat, targetPort[0].lon];\n\n            return pathDraw(sourceCoords, targetCoords);\n          })\n          .style(\"fill\", \"none\")\n          .style(\"stroke\", (d) => {\n            return importExport === \"Export\" ? \"tomato\" : \"#38B2AC\";\n          })\n          .style(\"stroke-width\", (d) => {\n            var width = +d.flow > 0 ? d.flow : -d.flow;\n            if (props.levelSelected === \"Ports\") {\n              return width + \"px\";\n            } else {\n              return width / 2 + \"px\";\n            }\n          })\n          .style(\"opacity\", 0.6);\n\n        Links.exit().remove();\n      }\n\n      function mouseleave(event, d) {\n        d3.select(this)\n          .transition()\n          .duration(\"150\")\n          .attr(\"fill-opacity\", 0.4)\n          .style(\"cursor\", \"default\");\n\n        portTooltip\n          .style(\"opacity\", 0)\n          .style(\"left\", 0 + \"px\")\n          .style(\"top\", 0 + \"px\");\n\n        linkLayer.selectAll(\"path\").remove();\n      }\n\n      function mousemove(event, d) {\n        portTooltip\n          .style(\"left\", pointer(event)[0] + 30 + \"px\")\n          .style(\"top\", pointer(event)[1] + 30 + \"px\");\n      }\n\n      function click(event, d) {\n        setTooltipPosition([pointer(event)[0], pointer(event)[1]]);\n\n        props.onSelectPort(d);\n      }\n\n      var Dots = portLayer\n        .selectAll(\"circle\")\n        .attr(\"class\", \"Dots\")\n        .data(ports)\n        .join(\"circle\")\n        .attr(\"id\", \"Ports\")\n        .attr(\"fill\", (d) => (+d[\"flow\"] < 0 ? \"#38B2AC\" : \"tomato\"))\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill-opacity\", 0.4)\n        .attr(\"cx\", (d) => {\n          return map.latLngToLayerPoint([d.lat, d.lon]).x;\n        })\n        .attr(\"cy\", (d) => map.latLngToLayerPoint([d.lat, d.lon]).y)\n        .attr(\"r\", (d) => {\n          var radius = +d.flow > 0 ? d.flow : -d.flow;\n\n          if (props.levelSelected === \"Ports\") {\n            return +radius;\n          } else {\n            return +radius / 3;\n          }\n        })\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseleave\", mouseleave)\n        .on(\"click\", click)\n        .on(\"mousemove\", mousemove);\n\n      const update = () =>\n        Dots.attr(\"cx\", (d) => map.latLngToLayerPoint([d.lat, d.lon]).x).attr(\n          \"cy\",\n          (d) => map.latLngToLayerPoint([d.lat, d.lon]).y\n        );\n\n      map.on(\"zoomend\", update);\n    }, [map]);\n\n    return null;\n  };\n\n  return (\n    <>\n      <MapContainer\n        id=\"mainMap\"\n        style={{ height: \"100%\" }}\n        center={[5, 18]}\n        zoom={2}\n        scrollWheelZoom={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n          url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\"\n        />\n\n        <D3Layer />\n      </MapContainer>\n    </>\n  );\n};\n\nexport default Map;\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/bd1bf080322618e46ad6a5552d646105/raw/ports.csv\";\n\nexport const usePorts = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/43b07a35f49cb3b74c1a93ed2c809961/raw/flows.csv\";\n\nexport const useFlows = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/56d12817f6462bf7cd782d423b86ac11/raw/country_nodes.csv\";\n\nexport const useCountries = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/4e4596e8863543d99182de35c7855660/raw/country_flows.csv\";\n\nexport const useCountryFlows = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  Tooltip,\n  LabelList,\n} from \"recharts\";\nimport { Box, Text } from \"@chakra-ui/react\";\n\nconst ExportPortGraph = (props) => {\n  const flowData = props.flowData;\n\n  const flows = flowData.filter(\n    (flow) =>\n      +flow.Year === props.year &&\n      flow.Commodity === props.commodity &&\n      flow.source === props.sourcePort\n  );\n\n  flows.sort((a, b) => parseFloat(b.flow) - parseFloat(a.flow));\n\n  console.log(flows.slice(0, 10));\n\n  return (\n    <>\n      <Box height=\"50%\" width=\"100%\">\n        <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n          Biggest export partners (Trade volume in Mt)\n        </Text>\n        <ResponsiveContainer width=\"100%\" height=\"90%\">\n          <BarChart data={flows.slice(0, 10)} layout=\"vertical\">\n            <XAxis type=\"number\" />\n            <YAxis type=\"category\" hide />\n            <Bar dataKey=\"flow\" fill=\"tomato\">\n              <LabelList\n                dataKey=\"target\"\n                position=\"insideLeft\"\n                style={{\n                  fontSize: \"0.8em\",\n                  fill: \"white\",\n                }}\n              />\n            </Bar>\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default ExportPortGraph;\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  Tooltip,\n  LabelList,\n} from \"recharts\";\nimport { Box, Text } from \"@chakra-ui/react\";\n\nconst ExportPortGraph = (props) => {\n  const flowData = props.flowData;\n\n  if (!flowData) {\n    return null;\n  }\n\n  const flows = flowData.filter(\n    (flow) =>\n      +flow.Year === props.year &&\n      flow.Commodity === props.commodity &&\n      flow.target === props.targetPort\n  );\n\n  flows.sort((a, b) => parseFloat(b.flow) - parseFloat(a.flow));\n\n  console.log(flows.slice(0, 10));\n\n  return (\n    <>\n      <Box height=\"50%\" width=\"100%\">\n        <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n          Biggest import partners (Trade volume in Mt)\n        </Text>\n        <ResponsiveContainer width=\"100%\" height=\"90%\">\n          <BarChart data={flows.slice(0, 10)} layout=\"vertical\">\n            <XAxis type=\"number\" />\n            <YAxis type=\"category\" hide />\n            <Bar dataKey=\"flow\" fill=\"#38B2AC\">\n              <LabelList\n                dataKey=\"source\"\n                position=\"insideLeft\"\n                style={{\n                  fontSize: \"0.8em\",\n                  fill: \"white\",\n                }}\n              />\n            </Bar>\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default ExportPortGraph;\n","import React from \"react\";\nimport { useMines } from \"../loaders/useMines\";\nimport {\n  BarChart,\n  Bar,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  Tooltip,\n  LabelList,\n} from \"recharts\";\nimport { Text, Box } from \"@chakra-ui/react\";\n\nconst getDistance = (lat1, lon1, lat2, lon2) => {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2 - lat1); // deg2rad below\n  var dLon = deg2rad(lon2 - lon1);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) *\n      Math.cos(deg2rad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n  return d;\n};\n\nconst deg2rad = (deg) => {\n  return deg * (Math.PI / 180);\n};\n\nconst MineDisplay = (props) => {\n  const mines = useMines();\n\n  if (!mines) {\n    return <pre>Loading...</pre>;\n  }\n\n  const port = props.sourcePort;\n\n  mines.forEach((mine) => {\n    mine.Distance = getDistance(\n      port.lat,\n      port.lon,\n      mine.Latitude,\n      mine.Longitude\n    );\n  });\n\n  mines.sort((a, b) => parseFloat(a.Distance) - parseFloat(b.Distance));\n\n  if (props.commodity === \"Thermal\") {\n    var commodityMines = mines.filter((mine) => mine.Thermal === \"TRUE\");\n  } else if (props.commodity === \"Metallurgical\") {\n    commodityMines = mines.filter((mine) => mine.Metallurgical === \"TRUE\");\n  } else {\n    commodityMines = mines;\n  }\n\n  const topMines = commodityMines.slice(0, 10);\n\n  return (\n    <>\n      <Box height=\"50%\" width=\"100%\">\n        <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n          Closest mines (Output in Mt, sorted by distance)\n        </Text>\n        <ResponsiveContainer width=\"100%\" height=\"90%\">\n          <BarChart data={topMines} layout=\"vertical\">\n            <XAxis type=\"number\" />\n            <YAxis type=\"category\" hide />\n            <Bar dataKey=\"Output\" fill=\"tomato\">\n              <LabelList\n                dataKey=\"Output\"\n                position=\"insideLeft\"\n                style={{\n                  fontSize: \"0.8em\",\n                  fill: \"white\",\n                }}\n              />\n            </Bar>\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default MineDisplay;\n","import { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\n\nconst csvUrl =\n  \"https://gist.githubusercontent.com/Nfuu/3d9519a9c80c0149c2accf244a88c4d8/raw/mines.csv\";\n\nexport const useMines = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrl).then(setData);\n  }, []);\n\n  return data;\n};\n","const PlantDisplay = () => {\n  return null;\n};\n\nexport default PlantDisplay;\n","import React from \"react\";\nimport { VStack } from \"@chakra-ui/react\";\nimport ExportPortGraph from \"./ExportPortGraph.js\";\nimport ImportPortGraph from \"./ImportPortGraph.js\";\nimport MineDisplay from \"./MineDisplay.js\";\nimport PlantDisplay from \"./PlantDisplay.js\";\n\nconst PortLinkSidebar = (props) => {\n  const selectedPort = props.clickedPort;\n  const portName = selectedPort.Port;\n\n  if (+selectedPort.flow > 0) {\n    var flowDirection = \"Export\";\n  } else {\n    flowDirection = \"Import\";\n  }\n\n  if (flowDirection === \"Export\") {\n    return (\n      <>\n        <VStack height=\"100%\">\n          <MineDisplay\n            sourcePort={props.clickedPort}\n            commodity={props.commoditySelected}\n          />\n          <ExportPortGraph\n            sourcePort={portName}\n            flowData={props.flowData}\n            portData={props.portData}\n            year={props.yearSelected}\n            level={props.levelSelected}\n            commodity={props.commoditySelected}\n          />\n        </VStack>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <VStack height=\"100%\">\n          <ImportPortGraph\n            targetPort={portName}\n            flowData={props.flowData}\n            portData={props.portData}\n            year={props.yearSelected}\n            level={props.levelSelected}\n            commodity={props.commoditySelected}\n          />\n          <PlantDisplay />\n        </VStack>\n      </>\n    );\n  }\n};\n\nexport default PortLinkSidebar;\n","import {\n  VStack,\n  Text,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst YearSelector = (props) => {\n  const [year, setYear] = useState(2020);\n\n  const handleYearChange = (val) => {\n    setYear(val);\n    props.onSelectYear(year);\n  };\n\n  return (\n    <>\n      <VStack width=\"100%\" spacing={2}>\n        <Text fontSize=\"3xl\" color=\"gray.600\">\n          {year}\n        </Text>\n        <Slider\n          width=\"80%\"\n          aria-label=\"yearSlider\"\n          defaultValue={2020}\n          min={2017}\n          max={2020}\n          step={1}\n          onChangeEnd={(val) => handleYearChange(val)}\n        >\n          <SliderTrack bg=\"teal.200\">\n            <SliderFilledTrack bg=\"teal.400\" />\n          </SliderTrack>\n          <SliderThumb boxSize={4} bgColor=\"gray.200\" />\n        </Slider>\n      </VStack>\n    </>\n  );\n};\n\nexport default YearSelector;\n","import { Radio, RadioGroup, Stack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst CommoditySelector = (props) => {\n  const [commodity, setCommodity] = useState(\"Thermal\");\n\n  const handleSelection = (val) => {\n    setCommodity(val);\n\n    props.onSelectCommodity(val);\n  };\n\n  return (\n    <RadioGroup onChange={handleSelection} value={commodity}>\n      <Stack direction=\"row\" color=\"gray.600\">\n        <Radio value=\"Total\">Total</Radio>\n        <Radio value=\"Thermal\">Thermal</Radio>\n        <Radio value=\"Metallurgical\">Metallurgical</Radio>\n      </Stack>\n    </RadioGroup>\n  );\n};\n\nexport default CommoditySelector;\n","import { Center, Stat, StatLabel, StatNumber } from \"@chakra-ui/react\";\n\nconst MtDisplay = (props) => {\n  const mtAmount = +props.mtAmount;\n  const displayAmount = Math.abs(mtAmount.toFixed(2));\n\n  return (\n    <Center>\n      <Stat>\n        <StatLabel color=\"gray.600\">Exports/Imports in megatonnes:</StatLabel>\n        <StatNumber>{`${displayAmount} Mt`}</StatNumber>\n      </Stat>\n    </Center>\n  );\n};\n\nexport default MtDisplay;\n","import { Center, Stat, StatLabel, StatNumber } from \"@chakra-ui/react\";\n\nconst CO2Display = (props) => {\n  const CO2Amount = Math.abs((+props.mtAmount * 2.86).toFixed(2));\n\n  return (\n    <Center>\n      <Stat>\n        <StatLabel color=\"gray.600\">CO2 emissions if coal burned:</StatLabel>\n        <StatNumber>{`${CO2Amount} Mt CO2e`}</StatNumber>\n      </Stat>\n    </Center>\n  );\n};\n\nexport default CO2Display;\n","import { Radio, RadioGroup, Stack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nconst LevelSelector = (props) => {\n  const [level, setLevel] = useState(\"Ports\");\n\n  const handleSelection = (val) => {\n    setLevel(val);\n\n    props.onSelectLevel(val);\n  };\n\n  return (\n    <RadioGroup onChange={handleSelection} value={level}>\n      <Stack direction=\"row\" color=\"gray.600\">\n        <Radio value=\"Countries\">Country</Radio>\n        <Radio value=\"Ports\">Ports</Radio>\n      </Stack>\n    </RadioGroup>\n  );\n};\n\nexport default LevelSelector;\n","import React from \"react\";\nimport { VStack, Badge, Flex, Text } from \"@chakra-ui/react\";\n\nconst PortDisplay = (props) => {\n  const selectedPort = props.clickedPort;\n  const portName = selectedPort.Port;\n\n  if (+selectedPort.flow > 0) {\n    var flowDirection = \"Export\";\n    var badgeColor = \"tomato\";\n  } else {\n    flowDirection = \"Import\";\n    badgeColor = \"#38B2AC\";\n  }\n\n  return (\n    <>\n      <Flex display=\"flex\" alignItems=\"center\">\n        <VStack>\n          <Text fontSize=\"2xl\" color=\"gray.600\" textAlign=\"center\">\n            {portName}\n          </Text>\n          <Badge borderRadius=\"full\" px=\"2\" bgColor={badgeColor} color=\"white\">\n            {flowDirection}\n          </Badge>\n        </VStack>\n      </Flex>\n    </>\n  );\n};\n\nexport default PortDisplay;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Map from \"./components/Map\";\nimport \"./styles/custom.css\";\nimport \"./styles/outerContainer.css\";\nimport { Grid, GridItem, Box, Center, Divider, VStack } from \"@chakra-ui/react\";\nimport PortLinkSidebar from \"./components/PortLinkSidebar\";\nimport YearSelector from \"./components/YearSelector\";\nimport CommoditySelector from \"./components/CommoditySelector\";\nimport MtDisplay from \"./components/MtDisplay\";\nimport CO2Display from \"./components/CO2Display\";\nimport LevelSelector from \"./components/LevelSelector\";\nimport PortDisplay from \"./components/PortDisplay\";\n\nfunction App() {\n  const [clickedPort, setClickedPort] = useState({\n    Port: \"Select a port or country\",\n    flow: 0,\n  });\n  const [yearSelected, setYear] = useState(2020);\n  const [commoditySelected, setCommodity] = useState(\"Thermal\");\n  const [levelSelected, setLevel] = useState(\"Ports\");\n  const [portData, setPortData] = useState(null);\n  const [flowData, setFlowData] = useState(null);\n\n  return (\n    <>\n      <div className=\"outerContainer\">\n        <Grid\n          maxHeight=\"900px\"\n          maxWidth=\"1600px\"\n          w=\"100vw\"\n          h=\"100vh\"\n          templateRows=\"repeat(20, 1fr)\"\n          templateColumns=\"repeat(5, 1fr)\"\n          gap=\"4\"\n        >\n          <GridItem colStart={1} colEnd={1} rowStart={1} rowEnd={4}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              borderWidth=\"5pt\"\n              borderColor={clickedPort.flow > 0 ? \"tomato\" : \"#38B2AC\"}\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              display=\"flex\"\n            >\n              <PortDisplay clickedPort={clickedPort} />\n            </Box>\n          </GridItem>\n          <GridItem colStart={1} colEnd={1} rowStart={4} rowEnd={21}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              padding=\"10\"\n              display=\"flex\"\n            >\n              <PortLinkSidebar\n                clickedPort={clickedPort}\n                portData={portData}\n                flowData={flowData}\n                yearSelected={yearSelected}\n                commoditySelected={commoditySelected}\n                levelSelected={levelSelected}\n              />\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={3} colSpan={1}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              display=\"flex\"\n            >\n              <MtDisplay mtAmount={clickedPort.flow} />\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={3} colSpan={1}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              display=\"flex\"\n            >\n              <CO2Display mtAmount={clickedPort.flow} />\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={3} colSpan={2}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"lg\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              overflow=\"hidden\"\n              display=\"flex\"\n            >\n              <Box\n                width=\"50%\"\n                height=\"100%\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                display=\"flex\"\n              >\n                <YearSelector onSelectYear={(value) => setYear(value)} />\n              </Box>\n              <Center height=\"50px\">\n                <Divider orientation=\"vertical\" />\n              </Center>\n              <Box\n                width=\"50%\"\n                height=\"100%\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                display=\"flex\"\n              >\n                <VStack spacing={2}>\n                  <CommoditySelector\n                    onSelectCommodity={(value) => setCommodity(value)}\n                  />\n                  <Divider orientation=\"horizontal\" />\n                  <LevelSelector onSelectLevel={(value) => setLevel(value)} />\n                </VStack>\n              </Box>\n            </Box>\n          </GridItem>\n          <GridItem rowSpan={17} colSpan={4}>\n            <Box\n              width=\"100%\"\n              height=\"100%\"\n              bg=\"white\"\n              borderRadius=\"2xl\"\n              color=\"black\"\n              shadow=\"2xl\"\n              alignItems=\"center\"\n              overflow=\"hidden\"\n            >\n              <Map\n                onSelectPort={(object) => setClickedPort(object)}\n                yearSelected={yearSelected}\n                commoditySelected={commoditySelected}\n                levelSelected={levelSelected}\n                setPortData={(object) => setPortData(object)}\n                setFlowData={(object) => setFlowData(object)}\n              />\n            </Box>\n          </GridItem>\n        </Grid>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}